{{/*
Functions {
*/}}
{{- define "chart.valuesTableOfContents" -}}
{{-   if .Sections.Sections -}}
{{-     $sectionNames := list -}}
{{-     range .Sections.Sections -}}
{{-       $sectionNames = append $sectionNames .SectionName -}}
{{-     end -}}
{{-     $sections := list -}}
{{-     range ($sectionNames | sortAlpha) -}}
{{-       $currentSectionName := . -}}
{{-       range $.Sections.Sections -}}
{{-         if eq .SectionName $currentSectionName -}}
{{-           $thisSection := dict -}}
{{-           $title := regexReplaceAll "^[0-9A-Z]+\\.\\s+" .SectionName "" -}}
{{-           $link := printf "./values.yaml#L%d" (first .SectionItems).LineNumber -}}
{{-           $_ := set $thisSection "SectionName" .SectionName -}}
{{-           $_ := set $thisSection "SectionItems" .SectionItems -}}
{{-           $_ := set $thisSection "SectionTitle" $title -}}
{{-           $sections = append $sections $thisSection -}}
{{-         end -}}
{{-       end -}}
{{-     end -}}
{{-     if .Sections.DefaultSection.SectionItems -}}
{{-       $thisSection := dict -}}
{{-       $_ := set $thisSection "SectionName" .Sections.DefaultSection.SectionName -}}
{{-       $_ := set $thisSection "SectionItems" .Sections.DefaultSection.SectionItems -}}
{{-       $_ := set $thisSection "SectionTitle" .Sections.DefaultSection.SectionName -}}
{{-       $sections = append $sections $thisSection -}}
{{-     end -}}
{{-     range $sections -}}
{{-       $sectionAnchor := regexReplaceAll "\\s" .SectionTitle "-" | lower }}
  * [{{ .SectionTitle }}](#{{ $sectionAnchor }})
{{-     end -}}
{{-   end -}}
{{- end -}}

{{- define "chart.valueDefaultColumnRender" -}}
{{-   $defaultValue := (default .Default .AutoDefault) -}}
{{-   $notationType := .NotationType -}}
{{-   if .Default -}}
{{-     $defaultValue = (trimAll "`" (default .Default .AutoDefault) ) -}}
{{-     $notationType = "json" -}}
{{-   end -}}
{{-   if eq $notationType "none" -}}
{{-   else if eq $notationType "reference" -}}
[...](./values.yaml#L{{ .LineNumber }})
{{-   else if eq $notationType "plain" -}}
{{-     $defaultValue }}
{{-   else if eq $notationType "tpl" -}}
`{{ $defaultValue }}`
{{-   else -}}
`{{ $defaultValue }}`
{{-   end -}}
{{- end -}}

{{- define "chart.valuesTable" -}}
{{-   if .Sections.Sections -}}
{{-     $sectionNames := list -}}
{{-     range .Sections.Sections -}}
{{-       $sectionNames = append $sectionNames .SectionName -}}
{{-     end -}}
{{-     $sections := list -}}
{{-     range ($sectionNames | sortAlpha) -}}
{{-       $currentSectionName := . -}}
{{-       range $.Sections.Sections -}}
{{-         if eq .SectionName $currentSectionName -}}
{{-           $thisSection := dict -}}
{{-           $title := regexReplaceAll "^[0-9A-Z]+\\.\\s+" .SectionName "" -}}
{{-           $link := printf "./values.yaml#L%d" (first .SectionItems).LineNumber -}}
{{-           $_ := set $thisSection "SectionName" .SectionName -}}
{{-           $_ := set $thisSection "SectionItems" .SectionItems -}}
{{-           $_ := set $thisSection "SectionTitle" $title -}}
{{-           $_ := set $thisSection "SectionHeading" (printf "[%s](%s)" $title $link) -}}
{{-           $sections = append $sections $thisSection -}}
{{-         end -}}
{{-       end -}}
{{-     end -}}
{{-     if .Sections.DefaultSection.SectionItems -}}
{{-       $thisSection := dict -}}
{{-       $_ := set $thisSection "SectionName" .Sections.DefaultSection.SectionName -}}
{{-       $_ := set $thisSection "SectionItems" .Sections.DefaultSection.SectionItems -}}
{{-       $_ := set $thisSection "SectionTitle" .Sections.DefaultSection.SectionName -}}
{{-       $_ := set $thisSection "SectionHeading" .Sections.DefaultSection.SectionName -}}
{{-       $sections = append $sections $thisSection -}}
{{-     end -}}
{{-     range $sections }}

### {{ .SectionTitle }}

| Key | Description | Default |
|-----|-------------|---------|
{{-       range .SectionItems }}
| [`{{ .Key }}`](./values.yaml#L{{ .LineNumber }}) | {{ if .Description }}{{ .Description }}{{ else }}{{ .AutoDescription }}{{ end }} | {{  template "chart.valueDefaultColumnRender" . }} |
{{-       end }}
{{-     end }}
{{-   end -}}
{{- end -}}
{{/*
} End of functions
*/ -}}

# AI Assistant Helm chart

{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

* [Using this chart](#using-this-chart)
* [Database](#database)
  * [PostgreSQL](#postgresql)
* [Integrations](#integrations)
  * [CloudNativePG operator](#cloudnativepg-operator)
* [Values](#values)
{{- template "chart.valuesTableOfContents" . }}
* [Contribution](#contribution)
* [License](#license)
* [Support, Issues and License Questions](#support-issues-and-license-questions)

## Maintainers 

{{ template "chart.maintainersTable" . }}

## Using this chart

### Adding the repository

```shell
helm repo add nutrient https://pspdfkit.github.io/helm-charts
helm repo update
```

### Installing AI Assistant

```shell
helm upgrade --install -n ai-assistant \
     ai-assistant nutrient/ai-assistant \
     -f ./ai-assistant-values.yaml
```

### Dependencies

An optional dependency is [Document Engine chart](https://github.com/PSPDFKit/helm-charts/tree/master/charts/document-engine), to use when external Document Engine instance is not available.

Please consider [tests](/charts/ai-assistant/ci) as examples.

Schema is generated using [helm values schema json plugin](https://github.com/losisin/helm-values-schema-json).

`README.md` is generated with [helm-docs](https://github.com/norwoodj/helm-docs).

### Upgrade

> [!NOTE] 
> Please consult the [changelog](/charts/ai-assistant/CHANGELOG.md)

## Database and asset storage

### PostgreSQL 

In order to operate, AI Assistant requires a PostgreSQL database with `pg_vector` extenstion.

The chart does not provide means to install PostgreSQL database, object storage or Redis for rendering cache.

Instead, we recommend to manage these resources externally, e.g., on the cloud provider level. 

However, the chart suggests generation of PostgreSQL Cluster custom resource provided by [CloudNativePG](https://cloudnative-pg.io/) operator.

CloudNativePG is not the only possible solution, and we recommend to also consider [StackGres](https://stackgres.io/), [Zalando Postgres Operator](https://github.com/zalando/postgres-operator).

## Integrations

### CloudNativePG operator

A prerequisite is a running operator, which can be installed into namespace `cnpg-system` in a Kubernetes cluster like this:

```shell
helm repo add cnpg https://cloudnative-pg.github.io/charts
helm upgrade --install cnpg \
  --namespace cnpg-system --create-namespace \
  cnpg/cloudnative-pg
```

Then, a configuration subset to create a single node PostgreSQL database with hardcoded credentials and connect it to Document Engine:

```yaml
database:
  enabled: true
  postgres:
    host: "{{ print "{{ .Release.Name }}" }}-postgres-rw"
    database: ai-assistant
    username: postgres
    password: nutrientArtificialIntelligenceAssistant
cloudNativePG:
  enabled: true
  operatorNamespace: cnpg-system
  operatorReleaseName: cloudnative-pg
  clusterSpec:
    instances: 1
    storage:
      size: 512Mi
      storageClass: standard
    enableSuperuserAccess: true
    bootstrap:
      initdb:
        database: ai-assistant
        owner: whatever
    logLevel: warning
  superuserSecret:
    create: true
    username: postgres
    password: nutrientArtificialIntelligenceAssistant
  networkPolicy:
    enabled: true
```

## Values

{{ template "chart.valuesTable" . }}

## Contribution

The chart is validated using [ct](https://github.com/helm/chart-testing/tree/main) [lint](https://github.com/helm/chart-testing/blob/main/doc/ct_lint.md):

```shell
ct lint --target-branch "$(git rev-parse --abbrev-ref HEAD)"
```

## License

This software is licensed under a [modified BSD license](LICENSE).

## Support, Issues and License Questions

Nutrient offers support via https://support.nutrient.io/hc/en-us/requests/new

Are you [evaluating our SDK](https://www.nutrient.io/sdk/)? That's great, we're happy to help out! To make sure this is fast, please use a work email and have someone from your company fill out our sales form: https://www.nutrient.io/contact-sales/

{{ template "helm-docs.versionFooter" . }}
